{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1.1\
	Because Clean doesn\'92t allow partially applied function definitions:\
		g :: Int -> Int -> Int\
 		g = (+)\
	is not allowed. If the type of task1 would be:\
		TaskState -> TaskResult Int\
	then it\'92s definition would have to be:\
		task1 state = viewInformation \'93..\'94 42 state\
	Because the type is between brackets, the compiler knows that the\
	type of task1 is a function from TaskState -> TaskResult Int and\
	that task1 itself does not have a parameter of type TaskState\
1.4\
	We get a \'93heap full\'94-error. This is (I think) because Clean is never \
 	forced to evaluate the console argument in the state, therefore \
	freadline- and <<<-calls are being added to the heap by the recursive\
	call to addIdea indefinitely. Since freadline will only block when it \
	is actually evaluated (waiting until it reads a \'91\\n\'92) the program \
	never blocks and therefore the heap is filled with the recursive\
	addIdea (and all the functions it calls) calls. \
\
\
Opmerking 2:\
	Let op! als je pure a = return a doet krijg je geen compileerfout \
	(circular reference, dus zou wel logisch zijn), maar in plaats daarvan\
	at runtime een segmentation fault\
\
	instance Applicative Task where\
    pure a = return a\
\
2.2 task 4 geeft heap error. Heeft clean een `seq` operator?\
\
Tried building a mond transformer, but couldn\'92t get the uniqueness \
proper :(}